// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CardboardDevice.proto

#include "CardboardDevice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class DeviceParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceParams>
      _instance;
} _DeviceParams_default_instance_;
namespace protobuf_CardboardDevice_2eproto {
void InitDefaultsDeviceParamsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_DeviceParams_default_instance_;
    new (ptr) ::DeviceParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceParams::InitAsDefaultInstance();
}

void InitDefaultsDeviceParams() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeviceParamsImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, vendor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, screen_to_lens_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, inter_lens_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, left_eye_field_of_view_angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, vertical_alignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, tray_to_lens_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, distortion_coefficients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, has_magnet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceParams, primary_button_),
  0,
  1,
  2,
  3,
  ~0u,
  6,
  4,
  ~0u,
  5,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::DeviceParams)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DeviceParams_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CardboardDevice.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025CardboardDevice.proto\"\356\003\n\014DeviceParams"
      "\022\016\n\006vendor\030\001 \001(\t\022\r\n\005model\030\002 \001(\t\022\037\n\027scree"
      "n_to_lens_distance\030\003 \001(\002\022\033\n\023inter_lens_d"
      "istance\030\004 \001(\002\022)\n\035left_eye_field_of_view_"
      "angles\030\005 \003(\002B\002\020\001\022G\n\022vertical_alignment\030\013"
      " \001(\0162#.DeviceParams.VerticalAlignmentTyp"
      "e:\006BOTTOM\022\035\n\025tray_to_lens_distance\030\006 \001(\002"
      "\022#\n\027distortion_coefficients\030\007 \003(\002B\002\020\001\022\022\n"
      "\nhas_magnet\030\n \001(\010\0228\n\016primary_button\030\014 \001("
      "\0162\030.DeviceParams.ButtonType:\006MAGNET\"8\n\025V"
      "erticalAlignmentType\022\n\n\006BOTTOM\020\000\022\n\n\006CENT"
      "ER\020\001\022\007\n\003TOP\020\002\"A\n\nButtonType\022\010\n\004NONE\020\000\022\n\n"
      "\006MAGNET\020\001\022\t\n\005TOUCH\020\002\022\022\n\016INDIRECT_TOUCH\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CardboardDevice.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_CardboardDevice_2eproto
const ::google::protobuf::EnumDescriptor* DeviceParams_VerticalAlignmentType_descriptor() {
  protobuf_CardboardDevice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CardboardDevice_2eproto::file_level_enum_descriptors[0];
}
bool DeviceParams_VerticalAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceParams_VerticalAlignmentType DeviceParams::BOTTOM;
const DeviceParams_VerticalAlignmentType DeviceParams::CENTER;
const DeviceParams_VerticalAlignmentType DeviceParams::TOP;
const DeviceParams_VerticalAlignmentType DeviceParams::VerticalAlignmentType_MIN;
const DeviceParams_VerticalAlignmentType DeviceParams::VerticalAlignmentType_MAX;
const int DeviceParams::VerticalAlignmentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DeviceParams_ButtonType_descriptor() {
  protobuf_CardboardDevice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CardboardDevice_2eproto::file_level_enum_descriptors[1];
}
bool DeviceParams_ButtonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceParams_ButtonType DeviceParams::NONE;
const DeviceParams_ButtonType DeviceParams::MAGNET;
const DeviceParams_ButtonType DeviceParams::TOUCH;
const DeviceParams_ButtonType DeviceParams::INDIRECT_TOUCH;
const DeviceParams_ButtonType DeviceParams::ButtonType_MIN;
const DeviceParams_ButtonType DeviceParams::ButtonType_MAX;
const int DeviceParams::ButtonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DeviceParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceParams::kVendorFieldNumber;
const int DeviceParams::kModelFieldNumber;
const int DeviceParams::kScreenToLensDistanceFieldNumber;
const int DeviceParams::kInterLensDistanceFieldNumber;
const int DeviceParams::kLeftEyeFieldOfViewAnglesFieldNumber;
const int DeviceParams::kVerticalAlignmentFieldNumber;
const int DeviceParams::kTrayToLensDistanceFieldNumber;
const int DeviceParams::kDistortionCoefficientsFieldNumber;
const int DeviceParams::kHasMagnetFieldNumber;
const int DeviceParams::kPrimaryButtonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceParams::DeviceParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_CardboardDevice_2eproto::InitDefaultsDeviceParams();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceParams)
}
DeviceParams::DeviceParams(const DeviceParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      left_eye_field_of_view_angles_(from.left_eye_field_of_view_angles_),
      distortion_coefficients_(from.distortion_coefficients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor()) {
    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&screen_to_lens_distance_, &from.screen_to_lens_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_button_) -
    reinterpret_cast<char*>(&screen_to_lens_distance_)) + sizeof(primary_button_));
  // @@protoc_insertion_point(copy_constructor:DeviceParams)
}

void DeviceParams::SharedCtor() {
  _cached_size_ = 0;
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&screen_to_lens_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_alignment_) -
      reinterpret_cast<char*>(&screen_to_lens_distance_)) + sizeof(vertical_alignment_));
  primary_button_ = 1;
}

DeviceParams::~DeviceParams() {
  // @@protoc_insertion_point(destructor:DeviceParams)
  SharedDtor();
}

void DeviceParams::SharedDtor() {
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceParams::descriptor() {
  ::protobuf_CardboardDevice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_CardboardDevice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceParams& DeviceParams::default_instance() {
  ::protobuf_CardboardDevice_2eproto::InitDefaultsDeviceParams();
  return *internal_default_instance();
}

DeviceParams* DeviceParams::New(::google::protobuf::Arena* arena) const {
  DeviceParams* n = new DeviceParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_eye_field_of_view_angles_.Clear();
  distortion_coefficients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!vendor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vendor_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*model_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&screen_to_lens_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_alignment_) -
        reinterpret_cast<char*>(&screen_to_lens_distance_)) + sizeof(vertical_alignment_));
    primary_button_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vendor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendor().data(), static_cast<int>(this->vendor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceParams.vendor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceParams.model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float screen_to_lens_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_screen_to_lens_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_to_lens_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float inter_lens_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_inter_lens_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inter_lens_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float left_eye_field_of_view_angles = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_left_eye_field_of_view_angles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_left_eye_field_of_view_angles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tray_to_lens_distance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_tray_to_lens_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tray_to_lens_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float distortion_coefficients = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_distortion_coefficients())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_distortion_coefficients())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_magnet = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_has_magnet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_magnet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceParams_VerticalAlignmentType_IsValid(value)) {
            set_vertical_alignment(static_cast< ::DeviceParams_VerticalAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceParams_ButtonType_IsValid(value)) {
            set_primary_button(static_cast< ::DeviceParams_ButtonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceParams)
  return false;
#undef DO_
}

void DeviceParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vendor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), static_cast<int>(this->vendor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceParams.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor(), output);
  }

  // optional string model = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceParams.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // optional float screen_to_lens_distance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->screen_to_lens_distance(), output);
  }

  // optional float inter_lens_distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->inter_lens_distance(), output);
  }

  // repeated float left_eye_field_of_view_angles = 5 [packed = true];
  if (this->left_eye_field_of_view_angles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _left_eye_field_of_view_angles_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->left_eye_field_of_view_angles().data(), this->left_eye_field_of_view_angles_size(), output);
  }

  // optional float tray_to_lens_distance = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->tray_to_lens_distance(), output);
  }

  // repeated float distortion_coefficients = 7 [packed = true];
  if (this->distortion_coefficients_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _distortion_coefficients_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->distortion_coefficients().data(), this->distortion_coefficients_size(), output);
  }

  // optional bool has_magnet = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->has_magnet(), output);
  }

  // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->vertical_alignment(), output);
  }

  // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->primary_button(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceParams)
}

::google::protobuf::uint8* DeviceParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vendor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), static_cast<int>(this->vendor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceParams.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vendor(), target);
  }

  // optional string model = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceParams.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // optional float screen_to_lens_distance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->screen_to_lens_distance(), target);
  }

  // optional float inter_lens_distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->inter_lens_distance(), target);
  }

  // repeated float left_eye_field_of_view_angles = 5 [packed = true];
  if (this->left_eye_field_of_view_angles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _left_eye_field_of_view_angles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->left_eye_field_of_view_angles_, target);
  }

  // optional float tray_to_lens_distance = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->tray_to_lens_distance(), target);
  }

  // repeated float distortion_coefficients = 7 [packed = true];
  if (this->distortion_coefficients_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _distortion_coefficients_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->distortion_coefficients_, target);
  }

  // optional bool has_magnet = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->has_magnet(), target);
  }

  // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->vertical_alignment(), target);
  }

  // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->primary_button(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceParams)
  return target;
}

size_t DeviceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float left_eye_field_of_view_angles = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->left_eye_field_of_view_angles_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _left_eye_field_of_view_angles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float distortion_coefficients = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->distortion_coefficients_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _distortion_coefficients_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string vendor = 1;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // optional string model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional float screen_to_lens_distance = 3;
    if (has_screen_to_lens_distance()) {
      total_size += 1 + 4;
    }

    // optional float inter_lens_distance = 4;
    if (has_inter_lens_distance()) {
      total_size += 1 + 4;
    }

    // optional float tray_to_lens_distance = 6;
    if (has_tray_to_lens_distance()) {
      total_size += 1 + 4;
    }

    // optional bool has_magnet = 10;
    if (has_has_magnet()) {
      total_size += 1 + 1;
    }

    // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
    if (has_vertical_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vertical_alignment());
    }

    // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
    if (has_primary_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->primary_button());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceParams)
    MergeFrom(*source);
  }
}

void DeviceParams::MergeFrom(const DeviceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_eye_field_of_view_angles_.MergeFrom(from.left_eye_field_of_view_angles_);
  distortion_coefficients_.MergeFrom(from.distortion_coefficients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vendor();
      vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000004u) {
      screen_to_lens_distance_ = from.screen_to_lens_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      inter_lens_distance_ = from.inter_lens_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      tray_to_lens_distance_ = from.tray_to_lens_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_magnet_ = from.has_magnet_;
    }
    if (cached_has_bits & 0x00000040u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000080u) {
      primary_button_ = from.primary_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceParams::CopyFrom(const DeviceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceParams::IsInitialized() const {
  return true;
}

void DeviceParams::Swap(DeviceParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceParams::InternalSwap(DeviceParams* other) {
  using std::swap;
  left_eye_field_of_view_angles_.InternalSwap(&other->left_eye_field_of_view_angles_);
  distortion_coefficients_.InternalSwap(&other->distortion_coefficients_);
  vendor_.Swap(&other->vendor_);
  model_.Swap(&other->model_);
  swap(screen_to_lens_distance_, other->screen_to_lens_distance_);
  swap(inter_lens_distance_, other->inter_lens_distance_);
  swap(tray_to_lens_distance_, other->tray_to_lens_distance_);
  swap(has_magnet_, other->has_magnet_);
  swap(vertical_alignment_, other->vertical_alignment_);
  swap(primary_button_, other->primary_button_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceParams::GetMetadata() const {
  protobuf_CardboardDevice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_CardboardDevice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
