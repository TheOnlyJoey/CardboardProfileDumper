// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CardboardDevice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CardboardDevice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DeviceParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceParams_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceParams_VerticalAlignmentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceParams_ButtonType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CardboardDevice_2eproto() {
  protobuf_AddDesc_CardboardDevice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CardboardDevice.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceParams_descriptor_ = file->message_type(0);
  static const int DeviceParams_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, screen_to_lens_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, inter_lens_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, left_eye_field_of_view_angles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, vertical_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, tray_to_lens_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, distortion_coefficients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, has_magnet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, primary_button_),
  };
  DeviceParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceParams_descriptor_,
      DeviceParams::default_instance_,
      DeviceParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceParams));
  DeviceParams_VerticalAlignmentType_descriptor_ = DeviceParams_descriptor_->enum_type(0);
  DeviceParams_ButtonType_descriptor_ = DeviceParams_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CardboardDevice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceParams_descriptor_, &DeviceParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CardboardDevice_2eproto() {
  delete DeviceParams::default_instance_;
  delete DeviceParams_reflection_;
}

void protobuf_AddDesc_CardboardDevice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CardboardDevice.proto\"\356\003\n\014DeviceParams"
    "\022\016\n\006vendor\030\001 \001(\t\022\r\n\005model\030\002 \001(\t\022\037\n\027scree"
    "n_to_lens_distance\030\003 \001(\002\022\033\n\023inter_lens_d"
    "istance\030\004 \001(\002\022)\n\035left_eye_field_of_view_"
    "angles\030\005 \003(\002B\002\020\001\022G\n\022vertical_alignment\030\013"
    " \001(\0162#.DeviceParams.VerticalAlignmentTyp"
    "e:\006BOTTOM\022\035\n\025tray_to_lens_distance\030\006 \001(\002"
    "\022#\n\027distortion_coefficients\030\007 \003(\002B\002\020\001\022\022\n"
    "\nhas_magnet\030\n \001(\010\0228\n\016primary_button\030\014 \001("
    "\0162\030.DeviceParams.ButtonType:\006MAGNET\"8\n\025V"
    "erticalAlignmentType\022\n\n\006BOTTOM\020\000\022\n\n\006CENT"
    "ER\020\001\022\007\n\003TOP\020\002\"A\n\nButtonType\022\010\n\004NONE\020\000\022\n\n"
    "\006MAGNET\020\001\022\t\n\005TOUCH\020\002\022\022\n\016INDIRECT_TOUCH\020\003", 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CardboardDevice.proto", &protobuf_RegisterTypes);
  DeviceParams::default_instance_ = new DeviceParams();
  DeviceParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CardboardDevice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CardboardDevice_2eproto {
  StaticDescriptorInitializer_CardboardDevice_2eproto() {
    protobuf_AddDesc_CardboardDevice_2eproto();
  }
} static_descriptor_initializer_CardboardDevice_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DeviceParams_VerticalAlignmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceParams_VerticalAlignmentType_descriptor_;
}
bool DeviceParams_VerticalAlignmentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeviceParams_VerticalAlignmentType DeviceParams::BOTTOM;
const DeviceParams_VerticalAlignmentType DeviceParams::CENTER;
const DeviceParams_VerticalAlignmentType DeviceParams::TOP;
const DeviceParams_VerticalAlignmentType DeviceParams::VerticalAlignmentType_MIN;
const DeviceParams_VerticalAlignmentType DeviceParams::VerticalAlignmentType_MAX;
const int DeviceParams::VerticalAlignmentType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DeviceParams_ButtonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceParams_ButtonType_descriptor_;
}
bool DeviceParams_ButtonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeviceParams_ButtonType DeviceParams::NONE;
const DeviceParams_ButtonType DeviceParams::MAGNET;
const DeviceParams_ButtonType DeviceParams::TOUCH;
const DeviceParams_ButtonType DeviceParams::INDIRECT_TOUCH;
const DeviceParams_ButtonType DeviceParams::ButtonType_MIN;
const DeviceParams_ButtonType DeviceParams::ButtonType_MAX;
const int DeviceParams::ButtonType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeviceParams::kVendorFieldNumber;
const int DeviceParams::kModelFieldNumber;
const int DeviceParams::kScreenToLensDistanceFieldNumber;
const int DeviceParams::kInterLensDistanceFieldNumber;
const int DeviceParams::kLeftEyeFieldOfViewAnglesFieldNumber;
const int DeviceParams::kVerticalAlignmentFieldNumber;
const int DeviceParams::kTrayToLensDistanceFieldNumber;
const int DeviceParams::kDistortionCoefficientsFieldNumber;
const int DeviceParams::kHasMagnetFieldNumber;
const int DeviceParams::kPrimaryButtonFieldNumber;
#endif  // !_MSC_VER

DeviceParams::DeviceParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceParams::InitAsDefaultInstance() {
}

DeviceParams::DeviceParams(const DeviceParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceParams::SharedCtor() {
  _cached_size_ = 0;
  vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screen_to_lens_distance_ = 0;
  inter_lens_distance_ = 0;
  vertical_alignment_ = 0;
  tray_to_lens_distance_ = 0;
  has_magnet_ = false;
  primary_button_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceParams::~DeviceParams() {
  SharedDtor();
}

void DeviceParams::SharedDtor() {
  if (vendor_ != &::google::protobuf::internal::kEmptyString) {
    delete vendor_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (this != default_instance_) {
  }
}

void DeviceParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceParams_descriptor_;
}

const DeviceParams& DeviceParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CardboardDevice_2eproto();
  return *default_instance_;
}

DeviceParams* DeviceParams::default_instance_ = NULL;

DeviceParams* DeviceParams::New() const {
  return new DeviceParams;
}

void DeviceParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_vendor()) {
      if (vendor_ != &::google::protobuf::internal::kEmptyString) {
        vendor_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    screen_to_lens_distance_ = 0;
    inter_lens_distance_ = 0;
    vertical_alignment_ = 0;
    tray_to_lens_distance_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    has_magnet_ = false;
    primary_button_ = 1;
  }
  left_eye_field_of_view_angles_.Clear();
  distortion_coefficients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vendor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_screen_to_lens_distance;
        break;
      }

      // optional float screen_to_lens_distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_screen_to_lens_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_to_lens_distance_)));
          set_has_screen_to_lens_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_inter_lens_distance;
        break;
      }

      // optional float inter_lens_distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inter_lens_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inter_lens_distance_)));
          set_has_inter_lens_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_left_eye_field_of_view_angles;
        break;
      }

      // repeated float left_eye_field_of_view_angles = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_eye_field_of_view_angles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_left_eye_field_of_view_angles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_left_eye_field_of_view_angles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_tray_to_lens_distance;
        break;
      }

      // optional float tray_to_lens_distance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tray_to_lens_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tray_to_lens_distance_)));
          set_has_tray_to_lens_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_distortion_coefficients;
        break;
      }

      // repeated float distortion_coefficients = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distortion_coefficients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_distortion_coefficients())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58, input, this->mutable_distortion_coefficients())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_has_magnet;
        break;
      }

      // optional bool has_magnet = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_magnet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_magnet_)));
          set_has_has_magnet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_vertical_alignment;
        break;
      }

      // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertical_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceParams_VerticalAlignmentType_IsValid(value)) {
            set_vertical_alignment(static_cast< ::DeviceParams_VerticalAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_primary_button;
        break;
      }

      // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primary_button:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceParams_ButtonType_IsValid(value)) {
            set_primary_button(static_cast< ::DeviceParams_ButtonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string vendor = 1;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vendor(), output);
  }

  // optional string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model(), output);
  }

  // optional float screen_to_lens_distance = 3;
  if (has_screen_to_lens_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->screen_to_lens_distance(), output);
  }

  // optional float inter_lens_distance = 4;
  if (has_inter_lens_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->inter_lens_distance(), output);
  }

  // repeated float left_eye_field_of_view_angles = 5 [packed = true];
  if (this->left_eye_field_of_view_angles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_left_eye_field_of_view_angles_cached_byte_size_);
  }
  for (int i = 0; i < this->left_eye_field_of_view_angles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->left_eye_field_of_view_angles(i), output);
  }

  // optional float tray_to_lens_distance = 6;
  if (has_tray_to_lens_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->tray_to_lens_distance(), output);
  }

  // repeated float distortion_coefficients = 7 [packed = true];
  if (this->distortion_coefficients_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_distortion_coefficients_cached_byte_size_);
  }
  for (int i = 0; i < this->distortion_coefficients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->distortion_coefficients(i), output);
  }

  // optional bool has_magnet = 10;
  if (has_has_magnet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->has_magnet(), output);
  }

  // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
  if (has_vertical_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->vertical_alignment(), output);
  }

  // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
  if (has_primary_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->primary_button(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string vendor = 1;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vendor(), target);
  }

  // optional string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // optional float screen_to_lens_distance = 3;
  if (has_screen_to_lens_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->screen_to_lens_distance(), target);
  }

  // optional float inter_lens_distance = 4;
  if (has_inter_lens_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->inter_lens_distance(), target);
  }

  // repeated float left_eye_field_of_view_angles = 5 [packed = true];
  if (this->left_eye_field_of_view_angles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _left_eye_field_of_view_angles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->left_eye_field_of_view_angles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->left_eye_field_of_view_angles(i), target);
  }

  // optional float tray_to_lens_distance = 6;
  if (has_tray_to_lens_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->tray_to_lens_distance(), target);
  }

  // repeated float distortion_coefficients = 7 [packed = true];
  if (this->distortion_coefficients_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _distortion_coefficients_cached_byte_size_, target);
  }
  for (int i = 0; i < this->distortion_coefficients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->distortion_coefficients(i), target);
  }

  // optional bool has_magnet = 10;
  if (has_has_magnet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->has_magnet(), target);
  }

  // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
  if (has_vertical_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->vertical_alignment(), target);
  }

  // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
  if (has_primary_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->primary_button(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vendor = 1;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // optional string model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional float screen_to_lens_distance = 3;
    if (has_screen_to_lens_distance()) {
      total_size += 1 + 4;
    }

    // optional float inter_lens_distance = 4;
    if (has_inter_lens_distance()) {
      total_size += 1 + 4;
    }

    // optional .DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];
    if (has_vertical_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vertical_alignment());
    }

    // optional float tray_to_lens_distance = 6;
    if (has_tray_to_lens_distance()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_magnet = 10;
    if (has_has_magnet()) {
      total_size += 1 + 1;
    }

    // optional .DeviceParams.ButtonType primary_button = 12 [default = MAGNET];
    if (has_primary_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->primary_button());
    }

  }
  // repeated float left_eye_field_of_view_angles = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->left_eye_field_of_view_angles_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _left_eye_field_of_view_angles_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float distortion_coefficients = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->distortion_coefficients_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _distortion_coefficients_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceParams::MergeFrom(const DeviceParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  left_eye_field_of_view_angles_.MergeFrom(from.left_eye_field_of_view_angles_);
  distortion_coefficients_.MergeFrom(from.distortion_coefficients_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vendor()) {
      set_vendor(from.vendor());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_screen_to_lens_distance()) {
      set_screen_to_lens_distance(from.screen_to_lens_distance());
    }
    if (from.has_inter_lens_distance()) {
      set_inter_lens_distance(from.inter_lens_distance());
    }
    if (from.has_vertical_alignment()) {
      set_vertical_alignment(from.vertical_alignment());
    }
    if (from.has_tray_to_lens_distance()) {
      set_tray_to_lens_distance(from.tray_to_lens_distance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_magnet()) {
      set_has_magnet(from.has_magnet());
    }
    if (from.has_primary_button()) {
      set_primary_button(from.primary_button());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceParams::CopyFrom(const DeviceParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceParams::IsInitialized() const {

  return true;
}

void DeviceParams::Swap(DeviceParams* other) {
  if (other != this) {
    std::swap(vendor_, other->vendor_);
    std::swap(model_, other->model_);
    std::swap(screen_to_lens_distance_, other->screen_to_lens_distance_);
    std::swap(inter_lens_distance_, other->inter_lens_distance_);
    left_eye_field_of_view_angles_.Swap(&other->left_eye_field_of_view_angles_);
    std::swap(vertical_alignment_, other->vertical_alignment_);
    std::swap(tray_to_lens_distance_, other->tray_to_lens_distance_);
    distortion_coefficients_.Swap(&other->distortion_coefficients_);
    std::swap(has_magnet_, other->has_magnet_);
    std::swap(primary_button_, other->primary_button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceParams_descriptor_;
  metadata.reflection = DeviceParams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
